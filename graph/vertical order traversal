# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

from collections import deque

class Solution:
    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:
        
        q = deque()
        vot = []
        level = 0
        node = root
        h_level= 0
        pair = [node, level, h_level]
        d = {}
        
        q.append(pair)
        
        while len(q) != 0:
            
            level_size = len(q)
            for i in range(level_size):

                pair = q.popleft()
                node = pair[0]
                level = pair[1]
                

                if level in d:
                    d[level].append(node.val)
                else:
                    d[level] = [node.val]

                if node.left != None:
                    pair = [node.left, level - 1]
                    q.append(pair)

                if node.right != None:
                    pair = [node.right, level + 1]
                    q.append(pair)

        for i in sorted(d.keys()):
            vot.append(d[i])
        return vot


            
        
