class Solution:
    
    
#     recursion
#     tc = 2 ** n
    def f(self, nums, ind, p_ind, l):
        
#         base condtion
        
        if ind >= len(nums):
            return 0
        
#         not take

        l = 0 + self.f(nums, ind + 1, p_ind, l)
    
#     take
        
        if p_ind == -1 or nums[ind] > nums[p_ind]:
            l = max(l, 1 + self.f(nums, ind + 1, ind, l))
            
        return l
    
    
    
    
    
    
    
# memoization
    
    def f_mem(self, nums, ind, p_ind, l, n, dp):
        
#         base condtion
        
            if ind >= len(nums):
                return 0

    #         not take
            if dp[ind][p_ind + 1] != -1:
                return dp[ind][p_ind + 1]

            l = 0 + self.f_mem(nums, ind + 1, p_ind, l, n, dp)

    #     take

            if p_ind == -1 or nums[ind] > nums[p_ind]:
                l = max(l, 1 + self.f_mem(nums, ind + 1, ind, l, n, dp))

            dp[ind][p_ind + 1] = l

            return dp[ind][p_ind + 1]
        
    def lengthOfLIS(self, nums: List[int]) -> int:
        
        l = 0
        n = len(nums)
        dp = [[-1 for j in range(n+1)]for i in range(n)]
        l = self.f_mem(nums, 0, -1, l, n, dp)
        return l









class Solution:
    
#     tc = nlogn

        
    def lengthOfLIS(self, nums: List[int]) -> int:
        
        n = len(nums)
        dp = [1] * n
        maxi = 1
        
        for i in range(n):
            for prev in range(i):
                if nums[prev] < nums[i]:
                    dp[i] = max(dp[i] , 1 + dp[prev])
            maxi = max(maxi, dp[i])
        return maxi
        
        
