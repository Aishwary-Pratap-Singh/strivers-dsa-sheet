import java.util.*;
public class Solution {
    
    public static int f(ArrayList<Integer> arr, int ind, int[] t){
        
//         base case
        if (ind < 0) return 0;
        
        if (ind == 0){
            return arr.get(ind);
        }
        
//         logic
        if (t[ind] != -1){
            return t[ind];
        }
        
     
        int pick = arr.get(ind) + f(arr, ind - 2, t);
        
        int notPick = 0 + f(arr, ind - 1, t);
      
        return t[ind] = Math.max(pick, notPick);
        
    }
    
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
		// Write your code here.
        int ind = nums.size() - 1;
        int[] t = new int[ind + 1];
        for (int i = 0 ; i < ind + 1 ; i++){
            t[i] = -1 ;
        }
        int ans = f(nums, ind, t);
        return ans;
	}
}


------------------------------------------Tabulation------------------------------
tc = O(n)
sc = O(n)

import java.util.*;
public class Solution {
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
		// Write your code here.
        int n = nums.size();
        int[] dp = new int[n];
        int take, notTake = 0;
        for (int i = 0 ; i < n ; i++){
            dp[i] = 0;
    
        }
        for (int i = 0 ; i < n; i++){
            if (i == 0){
                dp[i] = nums.get(i);
            }
            else{
                 take = nums.get(i);
                    if (i - 2 >= 0)
                        take = nums.get(i) + dp[i - 2];
                        notTake = dp[i - 1];
                dp[i] = Math.max(take, notTake);
            }

        }
        return dp[n - 1];
	}
}
