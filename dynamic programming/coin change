
# tc = O(n * m)

class Solution:
    
    def f(self, coins, n, i, t) :
        
        if i < 0:
            return 0
            
        if n < 0:
            return 0
            
        if n == 0 :
            return 1
        
        if t[n][i] != -1 :
            return t[n][i]
        t[n][i] = self.f(coins, n, i-1, t) + self.f(coins, n - coins[i] , i, t)
        return t[n][i]
        
    def count(self, S, m, n): 
        # code here 
        
        t = [[-1 for j in range(len(S))]for i in range(n+1)]
        return self.f(S, n, len(S) - 1, t)
        

#{ 
#  Driver Code Starts
#Initial Template for Python 3

import sys
sys.setrecursionlimit(10**6)

if __name__ == '__main__': 
    t = int(input())
    for _ in range(t):
        n,m = list(map(int, input().strip().split()))
        S = list(map(int, input().strip().split()))
        ob = Solution()
        print(ob.count(S,m,n))
# } Driver Code Ends
