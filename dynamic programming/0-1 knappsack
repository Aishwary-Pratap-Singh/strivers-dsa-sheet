    
    # tc = O(W * n)
    
    def f(self, n, ind, W, wt, val, dp):
        
        if ind < 0 or W == 0:
            return 0
            
        if dp[ind][W] != -1:
            return dp[ind][W]
        notPick = 0 + self.f(n, ind -1, W, wt, val, dp)
        pick = 0
        
        if wt[ind] <= W:
            pick = val[ind] + self.f(n, ind-1, W - wt[ind], wt, val, dp)
            
        dp[ind][W] = max(pick, notPick)
        return dp[ind][W]
    
    #Function to return max value that can be put in knapsack of capacity W.
    def knapSack(self,W, wt, val, n):
       
        # code here
        dp = [[-1 for j in range(W+1)] for  i in range(n)]
        return self.f(n ,n-1, W, wt, val, dp )

#{ 
#  Driver Code Starts
#Initial Template for Python 3
import atexit
import io
import sys

# Contributed by : Nagendra Jha

if __name__ == '__main__':
    test_cases = int(input())
    for cases in range(test_cases):
        n = int(input())
        W = int(input())
        val = list(map(int,input().strip().split()))
        wt = list(map(int,input().strip().split()))
        ob=Solution()
        print(ob.knapSack(W,wt,val,n))
# } Driver Code Ends
