class Solution:
    
    def f(self, s1, s2, i, j, dp):
        
#         base case

        if i < 0 :
            return j + 1
        
        if j < 0:
            return i + 1
            
        
        if dp[i][j] != -1:
            return dp[i][j]
        
        if s1[i] == s2[j]:
            return self.f(s1, s2, i-1, j-1, dp)
        
        insert = 1 + self.f(s1, s2, i, j-1, dp)
        delete = 1 + self.f(s1, s2, i-1, j, dp)
        replace = 1 + self.f(s1, s2, i-1, j-1, dp)
        
        dp[i][j] = min(min(insert, delete), replace)
        return dp[i][j]
    
    def minDistance(self, word1: str, word2: str) -> int:
        n = len(word1)
        m = len(word2)
        
        dp = [[-1 for j in range(m)] for i in range(n)]
        
        return self.f(word1, word2, n - 1, m - 1, dp)
